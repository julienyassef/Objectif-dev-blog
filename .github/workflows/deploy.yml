name: üöÄ Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

jobs:
  deploy:
    name: üöÄ Deploy New Version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: SFTP Deploy docker-compose.yml
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{ secrets.SSH_USERNAME }}
          server: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          local_path: "./*"
          remote_path: ${{ secrets.SSH_APP_PATH }}
          delete_remote_files: true
          password: ${{ secrets.SSH_PASSWORD }}

      - name: SSH Connection to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Aller dans le r√©pertoire de l'application
            cd ${{ secrets.SSH_APP_PATH }}

            # Cr√©er le fichier .env avec les variables d'environnement √† partir des secrets GitHub
            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            # Cr√©er le fichier .env.local si n√©cessaire
            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env.local
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.local
            # Ajoutez d'autres variables d'environnement ici selon vos besoins

            # Cr√©er le r√©pertoire pour les uploads s'il n'existe pas d√©j√†
            if [ ! -d "/var/www/uploads" ]; then
              sudo mkdir -p /var/www/uploads
            fi

             # Corriger les permissions des fichiers dans le r√©pertoire uploads
            sudo chown -R 1001:1001 /var/www/uploads/pictures
            sudo chmod -R 775 /var/www/uploads/pictures


            # V√©rifier et red√©marrer les conteneurs Docker
            docker compose down
            docker compose up -d --build

            # Nettoyer les images Docker inutilis√©es
            docker image prune -f || true